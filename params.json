{"name":"FFMQ","tagline":"FFMQ - full-java, light-weight, fast JMS 1.1 queuer implementation","body":"### What is FFMQ ?\r\n\r\nFFMQ is a full-java, light-weight, fast JMS 1.1 queuer implementation.\r\n\r\nEmphasis is made on raw performance and reliability.\r\nAs a consequence, it does not provide a lot of features but it's small, fast, easy to configure and has reduced dependencies.\r\n\r\n### License\r\n\r\nFFMQ is released under the GNU LGPL v3 license in order to be used both as a standalone application and/or integrated in all kind of software.\r\n\r\n### Features\r\n\r\n* JMS 1.1 compliant (almost, see limits below)\r\n* Lightweight (full server is below 600KB)\r\n* Reduced dependencies : \r\n   * [3.x branch] JRE 1.4+, JMS API, commons-logging, [optional: log4j, mx4j]\r\n   * [4.x branch] JRE 1.5+, JMS API, commons-logging, [optional: log4j]\r\n* JMX monitoring support\r\n* SSL support for remote connections\r\n* Fast TCP-based network protocol\r\n* State-of-the-art asynchronous journaling persistence storage\r\n* Template-based destination definitions for easy configuration\r\n* JMS bridging support to pipe messages between destinations and/or queuers\r\n\r\n### Limits\r\n\r\nThe following required JMS operations are not yet implemented :\r\n\r\n    JMSXGroupID / JMSXGroupSeq message properties\r\n\r\nThe following optional JMS operations are not yet implemented :\r\n\r\n    ConnectionConsumers and DurableConnectionConsumers\r\n    Session MessageListener\r\n    XAConnections\r\n\r\nOther limitations :\r\n\r\n    Durable subscriptions are lost on server restart\r\n    Because FFMQ is using a separate disk store for each queue, \r\n    atomicity of transactions spanning multiple destinations cannot be \r\n    fully guaranteed in case of server failure. Per-queue atomicity is guaranteed.\r\n\r\n### Performance\r\n\r\nFFMQ is fast, real fast.\r\n\r\nAnyway, you should never trust any written performance claim.\r\nThe best way to have an exact idea is to test it by yourself ! Please give it a try, if you have a JMS compliant application or benchmark this should be pretty easy (See 'Quick Start' below).\r\n\r\n### Architecture\r\n\r\nTo get a technical insight on FFMQ inner workings you may want to have a look at the Technical Overview page.\r\n\r\n### Quick Start\r\n\r\nJust unzip the server package somewhere and start the server using the ffmq-server.bat or ffmq-server.sh shell in the bin/ directory.\r\n(If necessary you can change default listen ports and interfaces in the conf/ffmq-server.properties file)\r\n\r\nOn the client-side, you need the ffmq-core.jar in your classpath. (plus commons-logging and log4j if you don't already have them)\r\nHere is the default JNDI configuration to use :\r\n\r\n    Naming Context Factory : net.timewalker.ffmq3.jndi.FFMQInitialContextFactory\r\n    Connection Factory JNDI Name : factory/ConnectionFactory\r\n    Provider URL : tcp://<hostname>:10002\r\n\r\n### Bug reports / Contact\r\n\r\nIf you find any bug or problem, you can send me an email to : ffmq@timewalker.net\r\n\r\nIf you use FFMQ, successfully or not, I would be glad to hear from you. Tell me what you like or dislike about this piece of software.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}